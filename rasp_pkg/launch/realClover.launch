<?xml version="1.0"?>

<launch>

    <arg name="fcu_conn" default="usb"/>
    <arg name="fcu_ip" default="127.0.0.1"/>
    <arg name="fcu_sys_id" default="1"/>
    <arg name="gcs_bridge" default="tcp"/>
    <!-- <arg name="web_video_server" default="true"/> -->
    <arg name="rosbridge" default="true"/>
    <!-- <arg name="main_camera" default="true"/> -->
    <arg name="optical_flow" default="false"/>
    <arg name="aruco" default="false"/>
    <arg name="rangefinder_vl53l1x" default="true"/>
    <arg name="led" default="false"/>
    <!-- <arg name="blocks" default="false"/> -->
    <arg name="rc" default="false"/>
    <arg name="usb_device" default="/dev/px4fmu"/>

    <!-- Main Camera args -->
    <arg name="direction_z" default="down"/> <!-- direction the camera points: down, up -->
    <arg name="direction_y" default="backward"/> <!-- direction the camera cable points: backward, forward -->
    <arg name="device" default="/dev/video0"/> <!-- v4l2 device -->
    <arg name="throttled_topic" default="true"/> <!-- enable throttled image topic -->
    <arg name="throttled_topic_rate" default="5.0"/> <!-- throttled image topic rate -->

    <!-- Led args -->
    <arg name="ws281x" default="true"/>
    <arg name="led_effect" default="true"/>
    <arg name="led_notify" default="true"/>
    <arg name="led_count" default="72"/>
    <arg name="gpio_pin" default="21"/>

    <!-- Drone's args -->
    <arg name="ID" default="0"/>
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0.3"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>

    <!-- Aruco's args -->
    <arg name="aruco_detect" default="true"/>
    <arg name="aruco_map" default="true"/>
    <arg name="aruco_vpe" default="true"/>
    <arg name="placement" default="floor"/> <!-- markers placement: floor, ceiling, unknown -->
    <arg name="length" default="0.22"/> <!-- not-in-map markers length, m -->
    <arg name="map" default="great_swarm.txt"/> <!-- markers map file name -->
    <arg name="force_init" value="false"/> <!-- force estimator to init by publishing zero pose -->
    <arg name="disable" default="false"/> <!-- only force init -->


    <arg name="simulator" default="false"/> <!-- flag that we are not operating on a simulated drone -->

    <!-- log formatting -->
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}]: ${logger}: ${message}"/>

    <!-- rosbridge -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" if="$(eval rosbridge or rc)"/>

    <!-- tf2 republisher for web visualization -->
    <!-- <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher" output="screen" if="$(arg rosbridge)"/> -->
    
    <!-- web video server -->
    <!-- <node name="web_video_server" pkg="web_video_server" type="web_video_server" if="$(arg web_video_server)" required="false" respawn="true" respawn_delay="5">
        <param name="default_stream_type" value="ros_compressed"/>
        <param name="publish_rate" value="1.0"/>
    </node> -->
    
    <!-- PX4 configs -->
    <arg name="daemon" default="true"/> <!-- Automatically starts the px4io module-->

    <!-- MAVROS -->
    <arg name="remote" value="$(eval 14800 + arg('ID'))"/> <!-- Porta do Mavros no UAV -> PC -->
    <arg name="local" value="$(eval 15000 + arg('ID'))"/> <!-- Porta para receber msgs Mavlink no PC -->
    <arg name="fcu_url" value="$(arg usb_device)" if="$(eval fcu_conn == 'usb')"/>
    <!-- gcs bridge -->
    <arg name="gcs_url" value="tcp-l://0.0.0.0:5760" if="$(eval gcs_bridge == 'tcp')"/>
    <arg name="distance_sensor_remap" default="rangefinder/range"/>
    <arg name="viz" default="true"/>



    <!-- Output type -->
    <arg name="output" default="screen"/>

    <!-- remap mavlink bridge topics -->
    <!-- <remap from="/mavlink/to" to="/mavlink$(arg num)/to" />
    <remap from="/mavlink/from" to="/mavlink$(arg num)/from" /> -->


    <group ns="clover$(arg ID)">

        <!-- ID parameter -->
        <param name="clover_id" value="$(arg ID)"/> <!-- Defines clover Id-->

        <!-- Initial position parameters (z initializes in 0.0, not 0.3 because of gazebo ground colision) -->
        <param name="initial_pose/x" value="$(arg x)"/>
        <param name="initial_pose/y" value="$(arg y)"/>
        <param name="initial_pose/z" value="0"/>



        <!-- MAVROS -->

        <node pkg="mavros" type="mavros_node" name="mavros" clear_params="true" output="$(arg output)">
            <param name="fcu_url" value="$(arg fcu_url)"/>
            <param name="gcs_url" value ="$(arg gcs_url)"/>

            <param name="target_system_id" value="$(eval 1 + arg('ID'))"/>
            <param name="target_component_id" value="1"/>
            <param name="gcs_quiet_mode" value="true"/>
            <param name="conn/timeout" value="20"/>

            <param name="local_position/child_frame_id" value="base_link$(arg ID)"/>
            <param name="local_position/tf/child_frame_id" value="base_link$(arg ID)"/>
            <param name="global_position/child_frame_id" value="base_link$(arg ID)"/>
            <param name="global_position/tf/child_frame_id" value="base_link$(arg ID)"/>

            <!-- remap rangefinder -->
            <remap from="mavros/distance_sensor/rangefinder_sub" to="$(arg distance_sensor_remap)" if="$(eval bool(distance_sensor_remap))"/>   

            <!-- basic params -->
            <rosparam command="load" file="$(find rasp_pkg)/launch/mavros_config.yaml"/>
            <rosparam param="plugin_whitelist">
                - altitude
                - command
                - distance_sensor
                - ftp
                - global_position
                - imu
                - local_position
                - manual_control
                # - mocap_pose_estimate
                - param
                - px4flow
                - rc_io
                - setpoint_attitude
                - setpoint_position
                - setpoint_raw
                - setpoint_velocity
                - sys_status
                - sys_time
                - vision_pose_estimate
                # - vision_speed_estimate
                # - waypoint
            </rosparam>
        </node>


        <!-- remapped distance_sensor config -->
        <rosparam param="$(arg distance_sensor_remap)" if="$(eval bool(distance_sensor_remap))">
            subscriber: true
            id: 1
            orientation: PITCH_270
            covariance: 1  # cm
        </rosparam>

        <!-- Rangefinders frame -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="rangefinder_frame" args="0 0 -0.05 0 1.5707963268 0 base_link$(arg ID) rangefinder"/>

        <!-- Copter visualization -->
        <node name="visualization" pkg="mavros_extras" type="visualization" if="$(arg viz)">
            <remap to="mavros/local_position/pose" from="local_position"/>
            <remap to="mavros/setpoint_position/local" from="local_setpoint"/>
            <param name="fixed_frame_id" value="map"/>
            <param name="child_frame_id" value="base_link$(arg ID)"/>
            <param name="marker_scale" value="1"/>
            <param name="max_track_size" value="20"/>
            <param name="num_rotors" value="4"/>
        </node>



        <!-- ARUCO MARKERS -->

        <!-- aruco_detect: detect aruco markers, estimate poses -->
        <node name="aruco_detect" pkg="nodelet" if="$(eval aruco_detect and not disable)" type="nodelet" args="load aruco_pose/aruco_detect main_camera_nodelet_manager" output="screen" clear_params="true" respawn="true">
            <remap from="image_raw" to="main_camera/image_raw"/>
            <remap from="camera_info" to="main_camera/camera_info"/>
            <remap from="map_markers" to="aruco_map/map"/>
            <param name="estimate_poses" value="true"/>
            <param name="send_tf" value="true"/>
            <param name="use_map_markers" value="true"/>
            <param name="known_vertical" value="map" if="$(eval placement == 'floor' or placement == 'ceiling')"/>
            <param name="flip_vertical" value="true" if="$(eval placement == 'ceiling')"/>
            <param name="length" value="$(arg length)"/>
            <param name="transform_timeout" value="0.1"/>
            <!-- aruco detector parameters -->
            <param name="cornerRefinementMethod" value="2"/> <!-- contour refinement -->
            <param name="minMarkerPerimeterRate" value="0.075"/> <!-- 0.075 for 320x240, 0.0375 for 640x480 -->
            <!-- length override example: -->
            <!-- <param name="length_override/3" value="0.1"/> -->
        </node>

        <!-- aruco_map: estimate aruco map pose -->
        <node name="aruco_map" pkg="nodelet" type="nodelet" if="$(eval aruco_map and not disable)" args="load aruco_pose/aruco_map main_camera_nodelet_manager" output="screen" clear_params="true" respawn="true">
            <remap from="image_raw" to="main_camera/image_raw"/>
            <remap from="camera_info" to="main_camera/camera_info"/>
            <remap from="markers" to="aruco_detect/markers"/>
            <param name="map" value="$(find aruco_pose)/map/$(arg map)"/>
            <param name="known_vertical" value="map" if="$(eval placement == 'floor' or placement == 'ceiling')"/>
            <param name="flip_vertical" value="true" if="$(eval placement == 'ceiling')"/>
            <param name="image_axis" value="true"/>
            <param name="frame_id" value="aruco_map_detected$(arg ID)" if="$(arg aruco_vpe)"/>
            <param name="frame_id" value="aruco_map$(arg ID)" unless="$(arg aruco_vpe)"/>
            <param name="markers/frame_id" value="aruco_map$(arg ID)"/>
            <param name="markers/child_frame_id_prefix" value="aruco_"/>
        </node>

        <!-- vpe publisher from aruco markers -->
        <node name="vpe_publisher" pkg="clover" type="vpe_publisher" if="$(eval aruco_vpe or force_init)" output="screen" clear_params="true">
            <remap from="~pose_cov" to="aruco_map/pose" if="$(arg aruco_vpe)"/>
            <remap from="~vpe" to="mavros/vision_pose/pose"/>
            <param name="frame_id" value="aruco_map_detected$(arg ID)" if="$(arg aruco_vpe)"/>
            <param name="force_init" value="$(arg force_init)"/>
            <param name="offset_frame_id" value="aruco_map"/>
        </node>



        <!-- OPTICAL FLOW -->

        <node pkg="nodelet" type="nodelet" name="optical_flow" args="load clover/optical_flow main_camera_nodelet_manager" if="$(arg optical_flow)" clear_params="true" output="screen" respawn="true">
            <remap from="image_raw" to="main_camera/image_raw"/>
            <remap from="camera_info" to="main_camera/camera_info"/>
            <param name="calc_flow_gyro" value="true"/>
            <param name="roi_rad" value="0.8"/>
        </node>




        <!-- OFFBOARD CONTROL -->

        <node name="simple_offboard" pkg="clover" type="simple_offboard" output="screen" clear_params="true">
            <param name="reference_frames/main_camera_optical" value="map"/>
            <!-- mavros param -->
            <param name="mavros" value="/clover$(arg ID)/mavros" />
            <param name="reference_frames/body" value="map"/>
            <param name="reference_frames/base_link" value="map"/>
            <param name="reference_frames/navigate_target" value="map"/>

            <param name="body_frame" value="body$(arg ID)"/>
            <param name="target_frame" value="navigate_target$(arg ID)"/>
            <param name="setpoint" value="setpoint$(arg ID)"/>
        </node>

        <!-- simplified offboard control -> With REMAP -->
        <!-- <node name="simple_offboard" pkg="clover" type="simple_offboard" output="screen" clear_params="true">
            <param name="reference_frames/main_camera_optical" value="map"/>
            
            <param name="reference_frames/body" value="map"/>
            <param name="reference_frames/base_link" value="map"/>
            <param name="reference_frames/navigate_target" value="map"/>
            <param name="body_frame" value="body"/>
            <param name="target_frame" value="navigate_target"/>
            <param name="setpoint" value="setpoint"/>
            <remap from="body_frame" to="body$(arg ID)" />
            <remap name="target_frame" to="navigate_target$(arg ID)"/>
            <remap name="setpoint" to="setpoint$(arg ID)"/>
        </node> -->



        <!-- CAMERA -->

        <!-- Main camera direto pelo nó -->
        <node if="$(eval direction_z == 'down' and direction_y == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 -1.5707963 0 3.1415926 base_link$(arg ID) main_camera_optical$(arg ID)"/>
        <node if="$(eval direction_z == 'down' and direction_y == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 1.5707963 0 3.1415926 base_link$(arg ID) main_camera_optical$(arg ID)"/>
        <node if="$(eval direction_z == 'up' and direction_y == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 1.5707963 0 0 base_link$(arg ID) main_camera_optical$(arg ID)"/>
        <node if="$(eval direction_z == 'up' and direction_y == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 -1.5707963 0 0 base_link$(arg ID) main_camera_optical$(arg ID)"/>
        <node if="$(eval direction_z == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.03 0 0.05 -1.5707963 0 -1.5707963 base_link$(arg ID) main_camera_optical$(arg ID)"/>
        <node if="$(eval direction_z == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="-0.03 0 0.05 1.5707963 0 -1.5707963 base_link$(arg ID) main_camera_optical$(arg ID)"/>

        <!-- Template for custom camera orientation -->
        <!-- Camera position and orientation are represented by base_link -> main_camera_optical transform -->
        <!-- static_transform_publisher arguments: x y z yaw pitch roll frame_id child_frame_id -->
        <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical"/> -->

        <!-- camera nodelet manager -->
        <node pkg="nodelet" type="nodelet" name="main_camera_nodelet_manager" args="manager" output="screen" clear_params="true" respawn="true">
            <param name="num_worker_threads" value="2"/>
        </node>

        <!-- camera node -->
        <node pkg="nodelet" type="nodelet" name="main_camera" args="load cv_camera/CvCameraNodelet main_camera_nodelet_manager" launch-prefix="rosrun clover waitfile $(arg device)" clear_params="true" unless="$(arg simulator)" respawn="true">
            <param name="device_path" value="$(arg device)"/>
            <param name="frame_id" value="main_camera_optical$(arg ID)"/>
            <param name="camera_info_url" value="file://$(find clover)/camera_info/fisheye_cam.yaml"/>

            <param name="rate" value="100"/> <!-- poll rate -->
            <param name="cv_cap_prop_fps" value="40"/> <!-- camera FPS -->
            <param name="capture_delay" value="0.02"/> <!-- approximate delay on frame retrieving -->
            <param name="rescale_camera_info" value="true"/> <!-- automatically rescale camera calibration info -->

            <!-- camera resolution -->
            <param name="image_width" value="320"/>
            <param name="image_height" value="240"/>
        </node>

        <!-- camera visualization markers -->
        <node pkg="clover" type="camera_markers" ns="main_camera" name="main_camera_markers">
            <param name="scale" value="3.0"/>
        </node>

        <!-- image topic throttled -->
        <node pkg="topic_tools" name="main_camera_throttle" type="throttle" ns="main_camera"
            args="messages image_raw $(arg throttled_topic_rate) image_raw_throttled" if="$(arg throttled_topic)"/>



        <!-- vl53l1x ToF rangefinder -->
        <node name="rangefinder" pkg="vl53l1x" type="vl53l1x_node" output="screen" if="$(eval rangefinder_vl53l1x and not simulator)">
            <param name="frame_id" value="rangefinder"/>
            <param name="min_signal" value="0.4"/>
            <param name="pass_statuses" type="yaml" value="[0, 6, 7, 11]"/>
        </node>



        <!-- LED -->
        
        <!-- ws281x led strip driver -->
        <node pkg="ws281x" name="led" type="ws281x_node" clear_params="true" output="screen" if="$(eval ws281x and not simulator)">
            <param name="led_count" value="$(arg led_count)"/>
            <param name="gpio_pin" value="$(arg gpio_pin)"/>
            <param name="brightness" value="64"/>
            <param name="strip_type" value="WS2811_STRIP_GRB"/>
            <param name="target_frequency" value="800000"/>
            <param name="dma" value="10"/>
            <param name="invert" value="false"/>
        </node>

        <!-- high level led effects control, events notification with leds -->
        <node pkg="clover" name="led_effect" type="led" ns="led" clear_params="true" output="screen" if="$(arg led_effect)">
            <param name="blink_rate" value="2"/>
            <param name="fade_period" value="0.5"/>
            <param name="rainbow_period" value="5"/>
            <!-- events effects table -->
            <rosparam param="notify" if="$(arg led_notify)">
                startup: { r: 255, g: 255, b: 255 }
                connected: { effect: rainbow }
                disconnected: { effect: blink, r: 255, g: 50, b: 50 }
                acro: { r: 245, g: 155, b: 0 }
                stabilized: { r: 30, g: 180, b: 50 }
                altctl: { r: 255, g: 255, b: 40 }
                posctl: { r: 50, g: 100, b: 220 }
                offboard: { r: 220, g: 20, b: 250 }
                low_battery: { threshold: 3.6, effect: blink_fast, r: 255, g: 0, b: 0 }
                error: { effect: flash, r: 255, g: 0, b: 0, ignore: [ "[lpe] vision position timeout" ]}
            </rosparam>
        </node>



        <!-- rc backend -->
        <node name="rc" pkg="clover" type="rc" output="screen" if="$(arg rc)" clear_params="true">
            <!-- Send fake GCS heartbeats. Set to "true" for upstream PX4 -->
            <param name="use_fake_gcs" value="false"/>
        </node>

        <!-- Update static directory -->
        <!-- <node pkg="roswww_static" name="roswww_static" type="main.py" clear_params="true"> -->
            <!-- <param name="default_package" value="clover"/> -->
        <!-- </node> -->

    </group>

</launch>
